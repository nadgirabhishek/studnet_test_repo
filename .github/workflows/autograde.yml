name: Autograde (Renode)

on:
  push:
  pull_request:

jobs:
  grade:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout student repo
        uses: actions/checkout@v4

      - name: Checkout autograding repo
        uses: actions/checkout@v4
        with:
          repository: nadgirabhishek/autograding_repo   # <<< put YOUR repo here
          path: autograding_repo
          ref: main                                     # or the branch you use


      - name: Install toolchain & python
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-none-eabi binutils-arm-none-eabi libnewlib-arm-none-eabi python3

      - name: Build student firmware (must produce ./firmware.elf)
        run: |
          make
          test -f firmware.elf || (echo "ERROR: firmware.elf not found at repo root" && exit 1)

      - name: Prepare ELF and output dirs for simulator
        run: |
          mkdir -p elf out
          cp firmware.elf elf/firmware.elf

      - name: Run Renode (auto-detect STM32F0 platform)
        run: |
          docker run --rm \
            -v "$PWD":/workspace \
            -w /workspace \
            antmicro/renode:latest \
            bash -lc '
              set -euo pipefail
              mkdir -p out
              echo "[Renode] Searching for STM32F0 platform files..."
              PLAT="$(find /opt/renode/platforms -iname "*stm32f0*.repl" | head -n1 || true)"
              if [ -z "$PLAT" ]; then
                echo "[Renode] No stm32f0*.repl found. Listing candidates:"
                find /opt/renode/platforms -iname "*stm32*.repl" | sed "s/^/  /"
                echo "[Renode] FATAL: No STM32F0 REPL available in this image."; exit 2
              fi
              echo "[Renode] Using platform: $PLAT"
              # Run Renode headless with robust script inline
              renode --disable-xwt -e "
                logFile @out/renode_monitor.log
                logLevel 0
                using sysbus
                mach create \"f0\"
                machine LoadPlatformDescription @$PLAT
                sysbus LoadELF @elf/firmware.elf
                emulation SetGlobalQuantum \"100us\"
                echo \"ELF loaded and quantum set.\"
                # Try to enable GPIO access logging under the most common names
                try
                  sysbus LogPeripheralAccess sysbus.GPIOA True
                  echo \"Logging GPIOA\"
                catch
                  try
                    sysbus LogPeripheralAccess sysbus.gpioPortA True
                    echo \"Logging gpioPortA\"
                  catch
                    echo \"WARN: Could not enable GPIOA access logging (name mismatch)\"
                  end
                end
                peripherals
                emulation RunFor \"10s\"
                echo \"Run finished.\"
                quit
              "
            '

      - name: Grade LED 1Hz
        run: |
          python3 autograding_repo/tests/check_led_period.py


      - name: Upload Renode logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: renode_logs
          path: |
            out/renode_monitor.log
            out/renode_gpio_log.csv
          if-no-files-found: ignore

